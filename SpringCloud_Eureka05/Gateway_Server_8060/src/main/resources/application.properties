server.port=8060
spring.application.name=gateway-server

eureka.client.service-url.defaultZone=http://localhost:8090/eureka/,http://localhost:8091/eureka/
eureka.instance.prefer-ip-address=true
eureka.instance.instance-id=${spring.cloud.client.ip-address}:${server.port}
eureka.instance.lease-renewal-interval-in-seconds=5
eureka.instance.lease-expiration-duration-in-seconds=30

# Spring Cloud Gateway路由配置如下
# routes属性下可以配置多个路由，所以书写时使用 数组下标[0]
# id属性：自定义路由ID，保证唯一即可
spring.cloud.gateway.routes[0].id=consumerService
# uri属性：要访问的目标服务器地址，即Gateway的API网关地址
# lb代表从注册中心获取服务列表
# 这里改写成服务名，根据服务名自动从注册中心中获取服务地址并转发请求，实现动态路由
spring.cloud.gateway.routes[0].uri=lb://consumer-server
# predicates属性：使用断言判定路由条件。这里使用Path对请求路径进行匹配，如果为真就进行路由
spring.cloud.gateway.routes[0].predicates[0]=Path=/cart/addCart/**
# 这里使用Method对请求方式进行匹配，如果为真就进行路由
spring.cloud.gateway.routes[0].predicates[1]=Method=GET
# 配置了name为CircuitBreaker的filter，实际是对应CircuitBreakerGatewayFilterFactory
spring.cloud.gateway.routes[0].filters[0].name=CircuitBreaker
# 指定 熔断配置 对象实例
spring.cloud.gateway.routes[0].filters[0].args.name=backendA
# 设置降级逻辑（注意fallbackUri要以forward开头）
spring.cloud.gateway.routes[0].filters[0].args.fallbackUri=forward:/fallback

spring.cloud.gateway.routes[1].id=providerService
spring.cloud.gateway.routes[1].uri=lb://provider-server
spring.cloud.gateway.routes[1].predicates[0]=Path=/user/getUserById/**

# 跨域请求配置
# 允许哪些请求源跨域
spring.cloud.gateway.globalcors.cors-configurations.'[/**]'.allowed-origins=*
# 允许哪种方法类型跨域 get post delete put
spring.cloud.gateway.globalcors.cors-configurations.'[/**]'.allowed-methods=GET,POST,PUT,DELETE
# 允许哪种请求头跨域
spring.cloud.gateway.globalcors.cors-configurations.'[/**]'.allowed-headers=*

# 熔断器配置
# 失败请求百分比，超过这个比例，CircuitBreaker变为OPEN状态
resilience4j.circuitbreaker.configs.default.failure-rate-threshold=30
# 滑动窗口的类型，TIME_BASED, COUNT_BASED
resilience4j.circuitbreaker.configs.default.sliding-window-type=TIME_BASED
# 滑动窗口的大小，配置COUNT_BASED表示10个请求，配置TIME_BASED表示10秒
resilience4j.circuitbreaker.configs.default.sliding-window-size=10
# 最小请求个数，只有在滑动窗口内，请求个数达到这个最小个数，才会触发CircuitBreaker对于断路器的判断
resilience4j.circuitbreaker.configs.default.minimum-number-of-calls=2
# 设置true，表示自动从OPEN变为HALF_OPEN，即使没有请求过来
resilience4j.circuitbreaker.configs.default.automatic-transition-from-open-to-half-open-enabled=true
# 从OPEN变为HALF_OPEN状态需要等待的时间
resilience4j.circuitbreaker.configs.default.wait-duration-in-open-state=2s
# 当CircuitBreaker处于HALF_OPEN状态时，允许通过的请求个数
resilience4j.circuitbreaker.configs.default.permitted-number-of-calls-in-half-open-state=3
#白名单
#resilience4j.circuitbreaker.configs.default.ignore-exceptions[1]=
#resilience4j.circuitbreaker.configs.default.ignore-exceptions[0]=
#黑名单
resilience4j.circuitbreaker.configs.default.record-exceptions[0]=java.lang.Exception
# 构造熔断器backendA实例
resilience4j.circuitbreaker.instances.backendA.base-config=default